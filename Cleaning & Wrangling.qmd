---
title: "Cleaning & Wrangling"
author: "Brooke Wainwright"
format: html
editor: visual
---

## Background

These data come from a common garden drought experiment in Davis, California investigating the functional trait strategies of California grassland plants from five different grassland communities spanning California's latitudinal precipitation gradient. There 10-12 species per community or provenance, each provenance has 16 plots (8 drought, 8 control) across 10 shelters (5 drought, 5 control). In 2022-2023, we focused on collecting whole plant traits, including reproductive investment. This study focuses on how these traits relate to reproductive investment depending on drought treatment, native status, or provenance. This document will clean and wrangle the many datasets and images associated with this study.

## Traits & Objectives

-   Reproductive allocation
-   End of Season biomass
-   Relative Growth Rate
-   Photosynthetic Rate
-   Leaf Mass Area
-   Leaf Area
-   WUE Height
-   Leaf Nitrogen
-   Date of first flower
-   Mid season biomass partial
-   Root biomass partial
-   Root:shoot ratio partial
-   Root diameter partial
-   Specific root length partial
-   Root nitrogen partial

Bring in, explore, clean, rectify outliers, organize each trait or group of traits and export as "...\_CLEAN"

## Setup

```{r}
#| message: false
#| warning: false
#| echo: false

library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(viridis)
library(lme4)
library(LeafArea)
library(mapdata)
library(maps)
library(terra)
library(broom)
library(plyr)
```

## CA Map and Plant Comp

Make a map of California with the inside of the boundary as a heat map of an aridity index. Then add five pie charts of plant composition.

Can try to get climate data from: https://www.ncei.noaa.gov/access/monitoring/climate-at-a-glance/county/mapping/4/pcp/189606/12/value

```{r}
#| eval: false
plant_comp <- read_csv("USDA_Site Composition.csv")

usa <- map_data("usa") # we already did this, but we can do it again
ggplot() + 
  geom_polygon(data = usa, aes(x = long, y = lat, group = group)) + 
  coord_quickmap()

states <- map_data("state")
str(states)

ca <- states %>%
  filter(region == "california")
str(ca)

crs("ca")

ca_base <- ggplot(data = ca, mapping = aes(x = long, y = lat, group = group)) + 
  coord_quickmap() + 
  geom_polygon(color = "black", fill = "gray")
ca_base + theme_void()
```

```{r}
#| eval: false
## Need the pie chart data to have the following columns: ID, Lat, Long, Sp1 proportion, Sp2 proportion, etc.

# so we need to pivot wider the dataset and average across ten plots and add coordaintes for each site then use mapPies function

str(plant_comp)

# First average across ten plots
comp_sum <- plant_comp %>%
  filter(!Species == "Grass") %>% 
  group_by(Site, Species) %>% 
  summarise(avg_cov = mean(Percent_Cover, na.rm = TRUE))

comp_sum$prop_cov <- comp_sum$avg_cov/100

comp_sum <- comp_sum %>% 
  group_by(Site) %>% 
  mutate(prop_total = sum(prop_cov))

comp_sum$prop_adj <- comp_sum$prop_cov/comp_sum$prop_total

# check to make sure it worked
comp_sum <- comp_sum %>% 
  group_by(Site) %>% 
  mutate(prop_adj_total = sum(prop_adj))
?pivot_wider

comp_wide <- comp_sum %>% 
  select(Site,
         Species,
         prop_adj) %>% 
  pivot_wider(names_from = Species,
              values_from = prop_adj)

# need to go back and rectify unknown species

# add in lat and long for each site
site_coord <- read_csv("site coord.csv")



# practice adding them to the map

ca_base <- ggplot(data = ca, mapping = aes(x = long, y = lat)) + 
  geom_point(data = site_coord, aes(x = Lat, y = Long)) +
  coord_quickmap() + 
  geom_polygon(color = "black", fill = "gray")

ca_base + theme_void()


map_data <- 
  base_world +
  geom_point(data=cities, 
             aes(x=Longitude, y=Latitude), colour="Deep Pink", 
             fill="Pink",pch=21, size=5, alpha=I(0.7))

map_data

#Creat a base plot with gpplot2
p <- ggplot() + coord_fixed() +
  xlab("") + ylab("")

#Add map to base plot
base_ca_messy <- p + geom_polygon(data=ca, aes(x=long, y=lat, group=group), 
                               colour="light green", fill="light green")

map <- base_ca_messy + geom_point(data = site_coord,
                                  aes(x=Lat, y=Long))
map

# Points are way off, it's probably wrong coordinate system

?map_data

# Go find a shapefile of California, CalFire has official county boundaries. 
# Figure out what crs my points are in, go to settings and units in Gaia
```


## Reproductive allocation & End of Season biomass

These data are still being processed in the lab. 

Tasks:
Stats for comparing lines
Bold or dash native/invasive species in giant plot
Jitter points in native or invasive plots
Make populations colors the same
Use viridis scale

Determine outliers for veg mass and flower mass for each species
Remove outliers
Investigate outliers (when we're done)


For now, read in what we have so far and create some preliminary figures and analyses.

```{r}
#| warning: false
## Read in Data
repro <- read_csv("Reproductive Allocation_2023.csv")
str(repro)
summary(repro)
head(repro)

```

### Clean up and create variables

Remove rows that have NA in the Flower Count row and in the Veg Mass Row. For now, also drop rows that don't have any flower masses. Ultimately this should be a function but slow code it for now.

```{r}
# Figure out how to average flower masses as long as at least Flower_1_g is entered. Come back and do this.

repro_narm <- repro %>% 
  drop_na(Flower_Count) %>% 
  drop_na(Veg_Mass)


plots <- read_csv("Plot_info copy.csv")
str(plots)
summary(plots)
head(plots)

spp <- read_csv("Species Codes copy.csv")
unique(spp$Sp_Code)
unique(repro$Species)

# need to pull out first two characters in string of plant ID to create a "plot" column

repro_narm <- repro_narm %>% 
  mutate(Plot = substr(Plant_ID, start = 1, stop = 2))
unique(repro_narm$Plot)

repro_full <- left_join(repro_narm,plots,by = join_by(Plot))

repro_full$Sp_Code <- repro_full$Species

repro_full <- left_join(repro_full,spp,by = join_by(Sp_Code))

repro_full <- repro_full %>% 
  select(
    Plant_ID,
    Sp_Code,
    Scientific_Name,
    Native_Status,
    Growth_Habit,
    Perenniality,
    Rating,
    Source,
    Recorder,
    Collection_Date,
    Plot,
    Block,
    Shelter,
    Plot_number,
    Population,
    Treatment,
    Flower_Count,
    Flower_1_g,
    Flower_2_g,
    Flower_3_g,
    Flower_4_g,
    Flower_5_g,
    Flower_6_g,
    Flower_7_g,
    Flower_8_g,
    Flower_9_g,
    Flower_10_g,
    Veg_Mass
  )

```
```{r}
repro_outliers <- repro_full

# pivot longer flower masses and drop veg mass
repro_outliers_2 <- repro_outliers %>% 
  pivot_longer(cols = c(Flower_1_g, 
                        Flower_2_g, 
                        Flower_3_g,
                        Flower_4_g,
                        Flower_5_g,
                        Flower_6_g,
                        Flower_7_g,
                        Flower_8_g,
                        Flower_9_g,
                        Flower_10_g),
               names_to = "Flower",
               values_to = "Flower_Mass_g") %>% 
  select(Plant_ID,
         Sp_Code,
         Scientific_Name,
         Population,
         Flower,
         Flower_Mass_g,
         Veg_Mass) %>% 
  filter(!is.na(Flower_Mass_g))

write_csv(repro_outliers_2, "repro_intern.csv")

repro_avgs <- repro_outliers_2 %>% 
  group_by(Sp_Code,
           Population) %>% 
  mutate(fl_avg = mean(Flower_Mass_g, na.rm = TRUE),
            fl_sd = sd(Flower_Mass_g, na.rm = TRUE),
            vg_avg = mean(Veg_Mass, na.rm = TRUE),
            vg_sd = sd(Veg_Mass, na.rm = TRUE)) %>% 
  select(Plant_ID,
         Sp_Code,
         Population,
         Flower,
         Flower_Mass_g,
         fl_avg,
         fl_sd,
         Veg_Mass,
         vg_avg,
         vg_sd)

repro_avgs <- repro_avgs[complete.cases(repro_avgs),]

repro_avgs <- repro_avgs %>% 
  mutate(fl_max = fl_avg + 3*fl_sd,
         fl_min = fl_avg - 3*fl_sd,
         vg_max = vg_avg + 3*vg_sd,
         vg_min = vg_avg - 3*vg_sd)

fl_outliers <- repro_avgs[which(repro_avgs$Flower_Mass_g > repro_avgs$fl_max | repro_avgs$Flower_Mass_g < repro_avgs$fl_min),c("Plant_ID","Sp_Code","Population", "Flower", "Flower_Mass_g","fl_avg","fl_sd","fl_min","fl_max")]

vg_outliers <- repro_avgs[which(repro_avgs$Veg_Mass > repro_avgs$vg_max | repro_avgs$Veg_Mass < repro_avgs$vg_min),c("Plant_ID","Sp_Code","Population", "Veg_Mass","vg_avg","vg_sd","vg_min","vg_max")]

vg_outliers <- vg_outliers[-which(duplicated(vg_outliers)),]


write_csv(fl_outliers, "fl_outliers.csv")
write_csv(vg_outliers, "vg_outliers.csv")
```

```{r}

# check to make sure you have the right columns

firstfl = which(colnames(repro_full)=="Flower_1_g")
lastfl = which(colnames(repro_full)=="Flower_10_g")

repro_full[,c(firstfl:lastfl)]

# Average flower masses for each individual
repro_full$fl_average <- rowMeans(repro_full[,c(firstfl:lastfl)], na.rm = TRUE)

# Find the individuals with no flower mass
no_fls <- repro_full[which(repro_full$fl_average == "NaN"),]
#include everything except fl-Average

firstcol = which(colnames(no_fls)=="Plant_ID")
lastcol = which(colnames(no_fls)=="Veg_Mass")
no_fls <- no_fls[,c(firstcol:lastcol)]

repro_full <- repro_full[which(repro_full$fl_average != "NaN"),]

avg_fls <- repro_full %>% 
  group_by(Sp_Code, Population, Treatment) %>% 
  summarise(fl_average = mean(fl_average, na.rm = TRUE))

# mast avg fls onto no_fls and then re-merge no-fls with larger dataset
rep_fls <- left_join(no_fls,avg_fls,by=join_by(Sp_Code,Population,Treatment))
repro_fill <- rbind(rep_fls,repro_full)

# check your work
repro_fill[which(is.na(repro_fill$fl_average)),]
# There's one without averages to fill in? Calmen in E6...investigate

repro_fill$total_fl_mass <- repro_fill$Flower_Count*repro_fill$fl_average

# There's an entry for ESCCAL which hasn't been done yet -- look into
# Later you can remove any species with only one entry
```
### Find outliers, use ratio of V to R

Go back and detect outliers for flower mass per species 

```{r}
unique(repro_fill$Sp_Code)

summary <- repro_fill %>% 
  group_by(Sp_Code) %>% 
  summarise(n = n()) %>% 
  filter(n < 3)

Sp_List_small <- summary$Sp_Code
hist(repro_fill$Veg_Mass)

# Remove species with less than 3 entries
repro_fill_hi_n <- repro_fill[-(which(repro_fill$Sp_Code %in% c(Sp_List_small))),]
unique(repro_fill_hi_n$Sp_Code)


repro_fill_hi_n_narm <- repro_fill_hi_n[-(which(repro_fill_hi_n$total_fl_mass %in% c(NA, -Inf))),]

```

### Graph Allometry by Species

Here, make a graph with vegetative biomass on the x-axis and reproductive biomass on the y-axis. Have each species be a different color with raw points on the graph, faded in color. Add a line for each species.

Will need to go back and test nad remove outliers

```{r}
ggplot(repro_fill, aes(x = Veg_Mass, y = total_fl_mass, color = Scientific_Name)) +
  geom_point(aes(x = Veg_Mass, y = total_fl_mass, color = Scientific_Name)) +
  geom_smooth(method = "lm", fill = NA) +
  theme_bw() +
  labs(x = "Vegetative Biomass",
       y = "Reproductive Biomass") +
  theme(axis.text.x = element_text(size=9))

# Consider log -scaling to make more digestible

ggsave("Allom_prelim_plot.jpg")
```

### Make everything log scale

```{r}
repro_fill_hi_n_narm$Veg_Mass_ln <- log(repro_fill_hi_n_narm$Veg_Mass)
repro_fill_hi_n_narm$total_fl_mass_ln <- log(repro_fill_hi_n_narm$total_fl_mass)

repro_fill_hi_n_narm <- repro_fill_hi_n_narm[-(which(repro_fill_hi_n_narm$total_fl_mass_ln %in% c(NA, -Inf))),]

ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Scientific_Name, linetype = Native_Status)) +
  geom_abline(intercept = 0, slope = 1) +
  #geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Species)) +
  geom_smooth(method = "lm", fill = NA, size = 0.5) +
  # scale_color_viridis(discrete=TRUE) +
  theme_bw() +
  scale_linetype_manual(values = c("Native" = "dashed", "Non-native" = "solid")) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

# Consider log -scaling to make more digestible

ggsave("Allom_log_plot.jpg")

ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Scientific_Name, linetype = Growth_Habit)) +
  geom_abline(intercept = 0, slope = 1) +
  #geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Species)) +
  geom_smooth(method = "lm", fill = NA, size = 0.5) +
  # scale_color_viridis(discrete=TRUE) +
  theme_bw() +
  scale_linetype_manual(values = c("Forb" = "dashed", "Grass" = "solid")) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

# Consider log -scaling to make more digestible

ggsave("Allom_log_plot_Growth.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Scientific_Name, data = repro_fill_hi_n_narm))

mod <- lmList(total_fl_mass_ln ~ Veg_Mass_ln | Sp_Code, data = repro_fill_hi_n_narm)

# anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Sp_Code, data = repro_fill_hi_n))

```

### Analysis and Diving Deeper

- Look at Species from different populations
- Compare Native v non-native species
- Compare grasses and forbs
- Use model comparison to detect whether growth habit, native status, or perenniality are the best predictors of reproductive allometry

```{r}
level_order <- c('ANGELO', 'MCL', 'BORR','SEDG','WWP')

SiteColors <-
  setNames(c(viridis(5)), levels(c('ANGELO', 'MCL', 'BORR','SEDG','WWP')))

repro_AVEBAR <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "AVEBAR"),]

repro_AVEBAR$Population <- factor(repro_AVEBAR$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_AVEBAR, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Avena barbata") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_AVEBAR.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_AVEBAR))

repro_BRODIA <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "BRODIA"),]

repro_BRODIA$Population <- factor(repro_BRODIA$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_BRODIA, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Bromus diandrus") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_BRODIA.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_BRODIA))

repro_BROHOR <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "BROHOR"),]

repro_BROHOR$Population <- factor(repro_BROHOR$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_BROHOR, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Bromus hordeaceus") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_BROHOR.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_BROHOR))

repro_BROMAD <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "BROMAD"),]

repro_BROMAD$Population <- factor(repro_BROMAD$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_BROMAD, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Bromus madritensis") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_BROMAD.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_BROMAD))

repro_DAUPUS <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "DAUPUS"),]

repro_DAUPUS$Population <- factor(repro_DAUPUS$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_DAUPUS, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Daucus pusillus") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_DAUPUS.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_DAUPUS))

repro_LUPBIC <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "LUPBIC"),]

repro_LUPBIC$Population <- factor(repro_LUPBIC$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_LUPBIC, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Lupinus bicolor") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_LUPBIC.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_LUPBIC))

repro_MADGRA <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "MADGRA"),]

repro_MADGRA$Population <- factor(repro_MADGRA$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_MADGRA, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Madia gracilis") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_MADGRA.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_MADGRA))

repro_MICCAL <- repro_fill_hi_n_narm[which(repro_fill_hi_n_narm$Sp_Code == "MICCAL"),]

repro_MICCAL$Population <- factor(repro_MICCAL$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

ggplot(repro_MICCAL, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) + 
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       title = "Micropus californicus") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_MICCAL.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population, data = repro_MADGRA))

# write_csv(repro_fill, "repro_growth_intern.csv")

```
It seems like for forbs they are conservative from southern populations and aggressive from northern and grasses (except BROMAD), they are aggressive from the south and conservative from the north?


- Compare Native v non-native species
- Compare grasses and forbs
- Use model comparison to detect whether growth habit, native status, or perenniality are the best predictors of reproductive allometry

```{r}
ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Native_Status)) +
  #geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Native_Status, alpha = 0.5)) +
   guides(alpha = "none") +
  theme_bw() +
 geom_smooth(method = "lm", fill = NA) +
  theme(
    legend.text = element_text(size = 12.5),
    legend.title = element_text(size = 12.5),
    axis.text=element_text(size=8),
    axis.title=element_text(size=12.5),
    legend.position = "bottom"
  ) +
  scale_color_manual(values = c("Native" = "#440154FF", "Non-native" = "#5DC863FF")) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))",
       color = "")

ggsave("Allom_log_plot_Native.jpg")

unique(repro_fill_hi_n$total_fl_mass_ln)

unique(repro_fill_hi_n_narm$total_fl_mass_ln)

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Native_Status, data = repro_fill_hi_n_narm))

lmList(total_fl_mass_ln ~ Veg_Mass_ln | Native_Status, data = repro_fill_hi_n_narm)

```

```{r}
repro_fill_hi_n_narm$Population <- factor(repro_fill_hi_n_narm$Population, levels = c("ANGELO", "MCL", "BORR","SEDG","WWP"))

 

ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population, linetype = Native_Status)) +
  geom_abline(intercept = 0, slope = 1) +
 # geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Population)) +
  geom_smooth(method = "lm", fill = NA) +
  scale_color_manual(values = c("ANGELO" = "#440154FF", "MCL" = "#3B528BFF", "BORR" = "#21908CFF", "SEDG" = "#5DC863FF", "WWP" = "#FDE725FF")) +
  theme_bw() +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_Pop.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population*Native_Status, data = repro_fill_hi_n_narm))

lmList(total_fl_mass_ln ~ Veg_Mass_ln | Population, data = repro_fill_hi_n_narm)

```

Inspect functional type

```{r}
ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Growth_Habit)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Growth_Habit, alpha = 0.5)) +
  geom_smooth(method = "lm", fill = NA) +
  theme_bw() +
  scale_color_viridis(discrete=TRUE) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_GrowthHab.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Growth_Habit, data = repro_fill_hi_n_narm))

lmList(total_fl_mass_ln ~ Veg_Mass_ln | Growth_Habit, data = repro_fill_hi_n_narm)

```

Looks awfully similar to native vs non-native plot. Need to parse out what's going on. 

I wonder if I looked at native vs non-native forbs only because all grasses featured are non-native. 

```{r}
repro_forb <- repro_fill_hi_n_narm %>% 
  filter(Growth_Habit == "Forb")

ggplot(repro_forb, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Native_Status)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Native_Status, alpha = 0.5)) +
  geom_smooth(method = "lm", fill = NA) +
  theme_bw() +
  scale_color_viridis(discrete=TRUE) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_NativeForb.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Native_Status, data = repro_forb))

lmList(total_fl_mass_ln ~ Veg_Mass_ln | Native_Status, data = repro_forb)



```
They are the same.

And/or compared native v invasive v non-native.

```{r}
ggplot(repro_fill_hi_n_narm, aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Rating)) +
  geom_abline(intercept = 0, slope = 1) +
  geom_point(aes(x = Veg_Mass_ln, y = total_fl_mass_ln, color = Rating, alpha = 0.5)) +
  geom_smooth(method = "lm", fill = NA) +
  theme_bw() +
  scale_color_viridis(discrete=TRUE) +
  labs(x = "ln(Vegetative Biomass (g))",
       y = "ln(Reproductive Biomass (g))") +
  theme(axis.text.x = element_text(size=9))

ggsave("Allom_log_plot_NativeRating.jpg")

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Rating, data = repro_fill_hi_n_narm))

lmList(total_fl_mass_ln ~ Veg_Mass_ln | Rating, data = repro_fill_hi_n_narm)


```

There's only two species with classification "High" so might not be a good metric. We could lump all the high and moderates together and limited and non-native together

Then create a clustered bar graph where each cluster is a population and each bar is native, non-native, and invasive, and the bars indicate the RV slope.

Make a graph with POpulation on the x axis and slope of log(V) by log(R) on the y-axis. Each population has two bars one for average slope of native and one for average slope of non-native
```{r}
head(repro_fill_hi_n_narm)

anova(lm(total_fl_mass_ln ~ Veg_Mass_ln*Population*Native_Status, data = repro_fill_hi_n_narm))

mod <- lm(total_fl_mass_ln ~ Veg_Mass_ln:Population:Native_Status, data = repro_fill_hi_n_narm)
str(mod)

std_err <- summary(mod)$coefficients[, 2]
coefficients(mod)
cf <- coefficients(mod)
str(cf)
cf[1]
cf[2]

repro_summary <- repro_fill_hi_n %>% 
  group_by(Population,Native_Status) %>% 
  summarise(slope = NA,
            std_err = NA)

## should also include std error

repro_summary[repro_summary$Population == 'ANGELO' & repro_summary$Native_Status == 'Native',3] <- cf["Veg_Mass_ln:PopulationANGELO:Native_StatusNative"]

repro_summary[repro_summary$Population == 'ANGELO' & repro_summary$Native_Status == 'Native',4] <- std_err["Veg_Mass_ln:PopulationANGELO:Native_StatusNative"]

repro_summary[repro_summary$Population == 'ANGELO' & repro_summary$Native_Status == 'Non-native',3] <- cf["Veg_Mass_ln:PopulationANGELO:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'ANGELO' & repro_summary$Native_Status == 'Non-native',4] <- std_err["Veg_Mass_ln:PopulationANGELO:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'MCL' & repro_summary$Native_Status == 'Native',3] <- cf["Veg_Mass_ln:PopulationMCL:Native_StatusNative"]

repro_summary[repro_summary$Population == 'MCL' & repro_summary$Native_Status == 'Native',4] <- std_err["Veg_Mass_ln:PopulationMCL:Native_StatusNative"]

repro_summary[repro_summary$Population == 'MCL' & repro_summary$Native_Status == 'Non-native',3] <- cf["Veg_Mass_ln:PopulationMCL:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'MCL' & repro_summary$Native_Status == 'Non-native',4] <- std_err["Veg_Mass_ln:PopulationMCL:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'BORR' & repro_summary$Native_Status == 'Native',3] <- cf["Veg_Mass_ln:PopulationBORR:Native_StatusNative"]

repro_summary[repro_summary$Population == 'BORR' & repro_summary$Native_Status == 'Native',4] <- std_err["Veg_Mass_ln:PopulationBORR:Native_StatusNative"]

repro_summary[repro_summary$Population == 'BORR' & repro_summary$Native_Status == 'Non-native',3] <- cf["Veg_Mass_ln:PopulationBORR:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'BORR' & repro_summary$Native_Status == 'Non-native',4] <- std_err["Veg_Mass_ln:PopulationBORR:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'SEDG' & repro_summary$Native_Status == 'Native',3] <- cf["Veg_Mass_ln:PopulationSEDG:Native_StatusNative"]

repro_summary[repro_summary$Population == 'SEDG' & repro_summary$Native_Status == 'Native',4] <- std_err["Veg_Mass_ln:PopulationSEDG:Native_StatusNative"]

repro_summary[repro_summary$Population == 'SEDG' & repro_summary$Native_Status == 'Non-native',3] <- cf["Veg_Mass_ln:PopulationSEDG:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'SEDG' & repro_summary$Native_Status == 'Non-native',4] <- std_err["Veg_Mass_ln:PopulationSEDG:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'WWP' & repro_summary$Native_Status == 'Native',3] <- cf["Veg_Mass_ln:PopulationWWP:Native_StatusNative"]

repro_summary[repro_summary$Population == 'WWP' & repro_summary$Native_Status == 'Native',4] <- std_err["Veg_Mass_ln:PopulationWWP:Native_StatusNative"]

repro_summary[repro_summary$Population == 'WWP' & repro_summary$Native_Status == 'Non-native',3] <- cf["Veg_Mass_ln:PopulationWWP:Native_StatusNon-native"]

repro_summary[repro_summary$Population == 'WWP' & repro_summary$Native_Status == 'Non-native',4] <- std_err["Veg_Mass_ln:PopulationWWP:Native_StatusNon-native"]

# add std error bars

precip <- read_csv("Site_Precip.csv")
precip$Precip_mm <- as.factor(precip$Precip_mm)
repro_summary_2 <- left_join(repro_summary,precip, by = join_by("Population"))

ggplot(repro_summary_2, aes(x = factor(Precip_mm, level=c('1780','757','603','380','320')), y = slope, fill = Native_Status)) + 
  geom_bar(position = position_dodge(), stat = "identity") +
  geom_errorbar(aes(ymin=slope-std_err, ymax=slope+std_err), width=0.3, colour="#FDE725FF", alpha=0.9, size=1.3, position = position_dodge(0.9)) +
  theme_bw() +
   theme(
    legend.text = element_text(size = 25),
    axis.text=element_text(size=16),
    axis.title=element_text(size=25),
    legend.position = "bottom"
  ) +
  scale_fill_manual(values = c("Native" = "#440154FF", "Non-native" = "#5DC863FF")) +
  labs(x = "Average Annual Precipitation (mm)",
       y = "Slope of log(V) and log(R)",
       fill = "")

ggsave("Slope_Pop_Native.jpg")
```



## Relative Growth Rate

### Clean up dataset

```{r}
rgr <- read_csv("Relative Growth Rate 2023 copy.csv")
plots <- read_csv("Plot_info copy.csv")
str(rgr)
summary(rgr)
head(rgr)
unique(rgr$Month)

# All IDs from May and June are missing ".1" at the end
# Extract species code from ID
# Extract plot, shelter letter from ID, add in block and population
rgr2 <- rgr %>% 
  mutate(Plant_ID = if_else(Month == "May" | Month == "June", true = paste0(Plant_ID, ".1"), false = Plant_ID),
         Sp_Code = substring(Plant_ID, 4,9),
         Plot = substring(Plant_ID, 1,2),) %>% 
  left_join(plots,by = join_by(Plot))
str(rgr2)  

unique(rgr2$Sp_Code)
unique(rgr2$Shelter)
unique(rgr2$Plot)

# Find gaps, investigate
# Fixed, entering errors besides A1.ACMPAR in May which is missing leaf count

incomplete_rows <- rgr2[,c("Plant_ID","Month","Height_cm","Leaf_number","canopy_x","canopy_y")]
incomplete_rows_2 <- incomplete_rows[!complete.cases(incomplete_rows),]
incomplete_rows_2 <- incomplete_rows_2[rowSums(is.na(incomplete_rows_2)) < 4,] 

# Find and investigate outliers
# Good job for interns
# Find average and standard deviation for each species, each growth variable (make area first), per population per month
str(rgr2)
rgr2$area <- as.numeric(rgr2$canopy_x)*as.numeric(rgr2$canopy_y)

rgr_avgs <- rgr2 %>% 
  group_by(Sp_Code,
           Month,
           Population) %>% 
  mutate(ht_avg = mean(Height_cm, na.rm = TRUE),
            ht_sd = sd(Height_cm, na.rm = TRUE),
            lf_avg = mean(Leaf_number, na.rm = TRUE),
            lf_sd = sd(Leaf_number, na.rm = TRUE),
            area_avg = mean(area, na.rm = TRUE),
            area_sd = sd(area, na.rm = TRUE),
            x_avg = mean(canopy_x, na.rm = TRUE),
            x_sd = sd(canopy_x, na.rm = TRUE),
            y_avg = mean(canopy_y, na.rm = TRUE),
            y_sd = sd(canopy_y, na.rm = TRUE)) %>% 
  select(Plant_ID,
         Sp_Code,
         Month,
         Population,
         Height_cm,
         ht_avg,
         ht_sd,
         Leaf_number,
         lf_avg,
         lf_sd,
         area,
         area_avg,
         area_sd,
         canopy_x,
         canopy_y,
         x_avg,
         x_sd,
         y_avg,
         y_sd)

rgr_avgs <- rgr_avgs[complete.cases(rgr_avgs),]

rgr_avgs <- rgr_avgs %>% 
  mutate(ht_max = ht_avg + 3*ht_sd,
         ht_min = ht_avg - 3*ht_sd,
         lf_max = lf_avg + 3*lf_sd,
         lf_min = lf_avg - 3*lf_sd,
         area_max = area_avg + 3*area_sd,
         area_min = area_avg - 3*area_sd,
         x_max = x_avg + 3*x_sd,
         x_min = x_avg - 3*x_sd,
         y_max = y_avg + 3*y_sd,
         y_min = y_avg - 3*y_sd)

ht_outliers <- rgr_avgs[which(rgr_avgs$Height_cm > rgr_avgs$ht_max | rgr_avgs$Height_cm < rgr_avgs$ht_min),c("Plant_ID","Sp_Code","Month","Population", "Height_cm","ht_avg","ht_sd","ht_min","ht_max")]

lf_outliers <- rgr_avgs[which(rgr_avgs$Leaf_number > rgr_avgs$lf_max | rgr_avgs$Leaf_number < rgr_avgs$lf_min),c("Plant_ID","Sp_Code","Month","Population", "Leaf_number","lf_avg","lf_sd","lf_min","lf_max")]

area_outliers <- rgr_avgs[which(rgr_avgs$area > rgr_avgs$area_max | rgr_avgs$area < rgr_avgs$area_min),c("Plant_ID","Sp_Code","Month","Population", "area","area_avg","area_sd","area_min","area_max")]

x_outliers <- rgr_avgs[which(rgr_avgs$canopy_x > rgr_avgs$x_max | rgr_avgs$canopy_x < rgr_avgs$x_min),c("Plant_ID","Sp_Code","Month","Population", "canopy_x","x_avg","x_sd","x_min","x_max")]

y_outliers <- rgr_avgs[which(rgr_avgs$canopy_y > rgr_avgs$y_max | rgr_avgs$canopy_y < rgr_avgs$y_min),c("Plant_ID","Sp_Code","Month","Population", "canopy_y","y_avg","y_sd","y_min","y_max")]

## Now go and investigate outliers using original data
```

### Create variables

```{r}
# Calculate canopy volume (height x canopy area)
head(rgr2)
rgr2$volume <- rgr2$Height_cm*rgr2$canopy_x*rgr2$canopy_y
rgr2$Date <- as.Date(rgr2$Date, tryFormats = "%m/%d/%y")
str(rgr2)

# Separate by metric

rgr_h_wide <- rgr2 %>% 
  select(Plant_ID,
         Date,
         Month,
         Height_cm) %>% 
  filter(!is.na(Height_cm)) %>%
  pivot_wider(id_cols = Plant_ID,
              names_from = Month,
              values_from = c(Date, Height_cm)) %>% 
  mutate(rgr_h_FM = (log(Height_cm_March)-log(Height_cm_February))/as.numeric((Date_March-Date_February)),
         rgr_h_MA = (log(Height_cm_April)-log(Height_cm_March))/as.numeric((Date_April-Date_March)),
         rgr_h_AM = (log(Height_cm_May)-log(Height_cm_April))/as.numeric((Date_May-Date_April)),
         rgr_h_MJ = (log(Height_cm_June)-log(Height_cm_May))/as.numeric((Date_June-Date_May)))

rgr_l_wide <- rgr2 %>% 
  select(Plant_ID,
         Date,
         Month,
         Leaf_number) %>% 
  filter(!is.na(Leaf_number)) %>%
  pivot_wider(id_cols = Plant_ID,
              names_from = Month,
              values_from = c(Date, Leaf_number)) %>% 
  mutate(rgr_l_FM = (log(Leaf_number_March)-log(Leaf_number_February))/as.numeric((Date_March-Date_February)),
         rgr_l_MA = (log(Leaf_number_April)-log(Leaf_number_March))/as.numeric((Date_April-Date_March)),
         rgr_l_AM = (log(Leaf_number_May)-log(Leaf_number_April))/as.numeric((Date_May-Date_April)),
         rgr_l_MJ = (log(Leaf_number_June)-log(Leaf_number_May))/as.numeric((Date_June-Date_May)))

rgr_v_wide <- rgr2 %>% 
  select(Plant_ID,
         Date,
         Month,
         volume) %>% 
  filter(!is.na(volume)) %>%
  pivot_wider(id_cols = Plant_ID,
              names_from = Month,
              values_from = c(Date, volume)) %>% 
  mutate(rgr_v_FM = (log(volume_March)-log(volume_February))/as.numeric((Date_March-Date_February)),
         rgr_v_MA = (log(volume_April)-log(volume_March))/as.numeric((Date_April-Date_March)),
         rgr_v_AM = (log(volume_May)-log(volume_April))/as.numeric((Date_May-Date_April)),
         rgr_v_MJ = (log(volume_June)-log(volume_May))/as.numeric((Date_June-Date_May)))
  
# Join all three together but only keep rgrs, full join by Plant_ID

rgr_h_l <- full_join(rgr_h_wide,rgr_l_wide,by = join_by(Plant_ID))

rgr_hlv <- full_join(rgr_h_l,rgr_v_wide,by = join_by(Plant_ID))

rgr_hlv2 <- rgr_hlv %>% 
  select(
    Plant_ID,
    rgr_h_FM,
    rgr_h_MA,
    rgr_h_AM,
    rgr_h_MJ,
    rgr_l_FM,
    rgr_l_MA,
    rgr_l_AM,
    rgr_l_MJ,
    rgr_v_FM,
    rgr_v_MA,
    rgr_v_AM,
    rgr_v_MJ
  )

## Wooooo we did it!
## Now just need to address outliers and re-run
## Some values have -Inf, investigate that at some point. For now you're done!
```

### Exploratory Graphs


### Select Reference times
One predictive variable of allometric slope might be relative growth rate timing and/or maximum relative growth rate.

## Photosynthetic Rate

```{r}
#| warning: false

# how to tell it the header and which rows to skip
# how to read through the filenames in a certain folder and make a list and then read those in 1 by 1
getwd()
licor_files <- list.files("/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/licor")
licor_files[4]

trial <- read_csv(licor_files[4], skip = 1, col_select = "obs":"gtc")

lic <- list() # creates a list
for (k in 1:length(licor_files)){
 lic[[k]] <- read_csv(licor_files[k], skip = 1, col_select = "obs":"gtc")
}

lic <- lapply(lic, function(tbl) {
  tbl$WUE <- as.numeric(tbl$WUE)
  return(tbl)
})

licor <- bind_rows(lic)
licor <- licor %>% 
  filter(!is.na(obs))

```

Now I need to bring in Licor leaf area csv and join. Also need to double check numbers for each species.

GALPAR, Holvir, miccal not working -- fixed, just needed to adjust minimum size.

```{r}
#| eval: false
amsmen = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/AMSMEN",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
amsmen<-amsmen$summary

avebar = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/AVEBAR",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
avebar<-avebar$summary

broare = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/BROARE",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
broare<-broare$summary

brodia = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/BRODIA",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
brodia<-brodia$summary

brohor = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/BROHOR",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
brohor<-brohor$summary

bromad = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/BROMAD",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
bromad<-bromad$summary

calmen = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/CALMEN",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
calmen<-calmen$summary

caucou = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/CAUCOU",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
caucou<-caucou$summary

cenmel = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/CENMEL",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
cenmel<-cenmel$summary

clapur = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/CLAPUR",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
clapur<-clapur$summary

corfil = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/CORFIL",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
corfil<-corfil$summary

daupus = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/DAUPUS",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
daupus<-daupus$summary

elycap = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/ELYCAP",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
elycap<-elycap$summary

erobot = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/EROBOT",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
erobot<-erobot$summary

erocic = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/EROCIC",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
erocic<-erocic$summary

esccal = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/ESCCAL",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
esccal<-esccal$summary


galpar = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/GALPAR", 
                distance.pixel = 355, 
                known.distance = 3,
                low.size = 0.005,
                log = TRUE)
          #      save.image = TRUE)
galpar<-galpar$summary

gerdis = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/GERDIS",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
gerdis<-gerdis$summary

holvir = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/HOLVIR", 
                distance.pixel = 355, 
                known.distance = 3, 
                low.size = 0.005,
                log = TRUE)
                # save.image = TRUE)
holvir<-holvir$summary

hypgla = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/HYPGLA",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
hypgla<-hypgla$summary

lupbic = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/LUPBIC",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
lupbic<-lupbic$summary

lupmic = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/LUPMIC",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
lupmic<-lupmic$summary

lupsuc = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/LUPSUC",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
lupsuc<-lupsuc$summary

madgra = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/MADGRA",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
madgra<-madgra$summary

miccal = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/MICCAL", 
                distance.pixel = 355, 
                known.distance = 3, 
                low.size = 0.005,
                log = TRUE)
             #   save.image = TRUE)
miccal<-miccal$summary

phatan = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/PHATAN",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
phatan<-phatan$summary

plaere = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/PLAERE",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
plaere<-plaere$summary

stipul = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/STIPUL",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
stipul<-stipul$summary

torarv = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/TORARV",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
torarv<-torarv$summary

trihir = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/TRIHIR",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE,
              low.size = 0.005)
trihir<-trihir$summary

vicsat = run.ij(set.directory = "/Users/brookewainwright/Documents/GitHub_Projects/growth-reproduction/Licor Leaf Area copy/VICSAT",
              distance.pixel = 355,
              known.distance = 3,
              log = TRUE)
vicsat<-vicsat$summary

# missing galpar, miccal, holvir
leaf_licor_area <- rbind(amsmen,
                         avebar,
                         broare,
                         brodia,
                         brohor,
                         bromad,
                         calmen,
                         caucou,
                         cenmel,
                         clapur,
                         corfil,
                         daupus,
                         elycap,
                         erobot,
                         erocic,
                         esccal,
                         galpar,
                         gerdis,
                         holvir,
                         hypgla,
                         lupbic,
                         lupmic,
                         lupsuc,
                         madgra,
                         miccal,
                         phatan,
                         plaere,
                         stipul,
                         torarv,
                         trihir,
                         vicsat)

write_csv(leaf_licor_area, "leaf_licor_area.csv")
```

Double check that the numbers of values per species aligns with number of images per species folder. -- All good

Then merge with Licor dataset by plant ID.

```{r}
# Separate date from plant ID, make in date format
leaf_licor_area <- read_csv("leaf_licor_area.csv")
head(leaf_licor_area)
head(licor)

licor$Date <- as.Date(substr(licor$date, start=1, stop=10))
str(licor$Date)

leaf_licor_area$Date <- as.Date(substr(leaf_licor_area$sample, start=11, stop=18), "%Y%m%d")
str(licor$Date)

# separate plant ID from same and add periods to plant id
leaf_licor_area$Plant_ID <- substr(leaf_licor_area$sample, start=1,stop=9)
leaf_licor_area$Plant_ID <- paste0(
  substr(leaf_licor_area$Plant_ID, 1, 2),
  ".",
  substr(leaf_licor_area$Plant_ID, 3, nchar(leaf_licor_area$Plant_ID))
)
leaf_licor_area$Plant_ID

leaf_licor_area$Plant_ID <- paste0(
  substr(leaf_licor_area$Plant_ID, 1, 9),
  ".",
  substr(leaf_licor_area$Plant_ID, 10, nchar(leaf_licor_area$Plant_ID))
)
leaf_licor_area$Plant_ID

# capitalize Licor plant id
licor$Plant_ID <- toupper(licor$`plant id`)

# merge with licor leaf area
licor2 <- left_join(licor,leaf_licor_area,by=c("Plant_ID" = "Plant_ID"))

# Come back and investigate NAs for licor2 -- why are some leaf areas missing

# multiply focal data by leaf area fraction
licor2$leaf_ratio <- 6/licor2$total.leaf.area
licor2 <- licor2 %>% 
  filter(!is.na(total.leaf.area)) %>% # filter NAs for now
  mutate(WUE_adj = leaf_ratio*WUE,
         E_adj = leaf_ratio*as.numeric(E),
         A_adj = leaf_ratio*as.numeric(A),
         Ci_adj = leaf_ratio*as.numeric(Ci),
         gsw_adj = leaf_ratio*as.numeric(gsw))
str(licor2)

# remove licor data with gsw below threshold
licor2[which(licor2$gsw_adj < 0.03),]

# There are values from September 2020???? investigate
# Weirdly this file 2023-04-30-0922_BRODIA_39.csv has the date at Sep 2020, some glitch. will need to fix
# September 23, 2020

# test for licor outliers by species, population, and treatment



# average licor data by plant_id



# extract species and plot from plant id

```


## Leaf Mass Area

## Leaf Area

## WUE

## Height

## Leaf Nitrogen

```{r}
cn <- read_csv("CN_2023.csv")
str(cn)

# break out species from sample ID
cn$sp <- substr(cn$Sample_ID,4,9)

sp_n <- count(cn, "sp")
sp_n[which(sp_n$freq < 4),1]
sp_rm <- sp_n[which(sp_n$freq < 4),1] 

cn <- cn %>% 
  filter(!sp %in% sp_rm)

str(cn)

cn_sum <- cn %>% 
  group_by(sp) %>%
  dplyr::summarise(mean_c13 = mean(δ13CVPDB_permil),
                   std_c13 = sd(δ13CVPDB_permil),
                   mean_n = mean(Total_N_µg),
                   std_n = sd(Total_N_µg),
                   mean_n15 = mean(δ15NAir_permil),
                   std_n15 = sd(δ15NAir_permil))

cn_sum <- cn_sum %>% 
  mutate(c13_max = mean_c13 + 3*std_c13,
         c13_min = mean_c13 - 3*std_c13,
         n_max = mean_n + 3*std_n,
         n_min = mean_n - 3*std_n,
         n15_max = mean_n15 + 3*std_n15,
         n15_min = mean_n15 - 3*std_n15)

cn_avgs <- left_join(cn, cn_sum, by=join_by("sp"))

c13_outliers <- cn_avgs[which(cn_avgs$δ13CVPDB_permil > cn_avgs$c13_max | cn_avgs$δ13CVPDB_permil < cn_avgs$c13_min),c("Sample_ID","sp", "δ13CVPDB_permil","mean_c13","std_c13","c13_max","c13_min")]

n_outliers <- cn_avgs[which(cn_avgs$Total_N_µg > cn_avgs$n_max | cn_avgs$Total_N_µg < cn_avgs$n_min),c("Sample_ID","sp", "Total_N_µg","mean_n","std_n","n_max","n_min")]

n15_outliers <- cn_avgs[which(cn_avgs$δ15NAir_permil > cn_avgs$n15_max | cn_avgs$δ15NAir_permil < cn_avgs$n15_min),c("Sample_ID","sp", "δ15NAir_permil","mean_n15","std_n15","n15_max","n15_min")]

```


## Date of first flower

## Mid season biomass partial

## Root biomass partial

## Root:shoot ratio partial

## Root diameter partial

## Specific root length partial

## Root nitrogen partial
